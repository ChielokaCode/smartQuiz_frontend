import {
  require_react
} from "./chunk-YSDLPTTY.js";
import {
  __toESM
} from "./chunk-ZS7NZCD4.js";

// node_modules/@kinde-oss/kinde-auth-react/dist/kinde-auth-react.esm.js
var import_react = __toESM(require_react());

// node_modules/jwt-decode/build/esm/index.js
var InvalidTokenError = class extends Error {
};
InvalidTokenError.prototype.name = "InvalidTokenError";
function b64DecodeUnicode(str) {
  return decodeURIComponent(atob(str).replace(/(.)/g, (m, p2) => {
    let code = p2.charCodeAt(0).toString(16).toUpperCase();
    if (code.length < 2) {
      code = "0" + code;
    }
    return "%" + code;
  }));
}
function base64UrlDecode(str) {
  let output = str.replace(/-/g, "+").replace(/_/g, "/");
  switch (output.length % 4) {
    case 0:
      break;
    case 2:
      output += "==";
      break;
    case 3:
      output += "=";
      break;
    default:
      throw new Error("base64 string is not of the correct length");
  }
  try {
    return b64DecodeUnicode(output);
  } catch (err) {
    return atob(output);
  }
}
function jwtDecode(token, options) {
  if (typeof token !== "string") {
    throw new InvalidTokenError("Invalid token specified: must be a string");
  }
  options || (options = {});
  const pos = options.header === true ? 0 : 1;
  const part = token.split(".")[pos];
  if (typeof part !== "string") {
    throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);
  }
  let decoded;
  try {
    decoded = base64UrlDecode(part);
  } catch (e2) {
    throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e2.message})`);
  }
  try {
    return JSON.parse(decoded);
  } catch (e2) {
    throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e2.message})`);
  }
}

// node_modules/@kinde-oss/kinde-auth-pkce-js/dist/kinde-auth-pkce-js.esm.js
var version = "3.0.30";
var SESSION_PREFIX = "pkce-code-verifier";
var flagDataTypeMap;
(function(flagDataTypeMap2) {
  flagDataTypeMap2["s"] = "string";
  flagDataTypeMap2["i"] = "integer";
  flagDataTypeMap2["b"] = "boolean";
})(flagDataTypeMap || (flagDataTypeMap = {}));
function base64UrlEncode(str) {
  const numberArray = Array.from(new Uint8Array(str));
  return btoa(String.fromCharCode.apply(null, numberArray)).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
}
function sha256(plain) {
  const encoder = new TextEncoder();
  const data = encoder.encode(plain);
  return window.crypto.subtle.digest("SHA-256", data);
}
async function pkceChallengeFromVerifier(v2) {
  const hashed = await sha256(v2);
  return base64UrlEncode(hashed);
}
function randomString() {
  const array = new Uint32Array(28);
  window.crypto.getRandomValues(array);
  return Array.from(array, (dec) => ("0" + dec.toString(16)).substr(-2)).join("");
}
var isValidJwt = (jwtToken) => {
  const unixTime = Math.floor(Date.now() / 1e3);
  return jwtToken.exp > unixTime;
};
var setupChallenge = async (authorizationEndpoint, appState) => {
  const state = randomString();
  const code_verifier = randomString();
  const code_challenge = await pkceChallengeFromVerifier(code_verifier);
  sessionStorage.setItem(`${SESSION_PREFIX}-${state}`, JSON.stringify({
    codeVerifier: code_verifier,
    appState
  }));
  const url = new URL(authorizationEndpoint);
  return { state, code_challenge, url };
};
var createStore = () => {
  let items = {};
  const getItem = (key) => {
    return items[key];
  };
  const setItem = (key, value) => {
    items[key] = value;
  };
  const removeItem = (key) => {
    delete items[key];
  };
  const reset = () => {
    items = {};
  };
  return {
    reset,
    getItem,
    removeItem,
    setItem
  };
};
var store = createStore();
var getClaim = (claim, tokenKey = "access_token") => {
  const token = store.getItem(`kinde_${tokenKey}`);
  return token ? { name: claim, value: token[claim] } : null;
};
var getClaimValue = (claim, tokenKey = "access_token") => {
  const obj = getClaim(claim, tokenKey);
  return obj && obj.value;
};
var getFlag = (code, defaultValue, flagType) => {
  const flags = getClaimValue("feature_flags");
  const flag = flags && flags[code] ? flags[code] : {};
  if (flag.v == null && defaultValue == null) {
    throw Error(`Flag ${code} was not found, and no default value has been provided`);
  }
  if (flagType && flag.t && flagType !== flag.t) {
    throw Error(`Flag ${code} is of type ${flagDataTypeMap[flag.t]} - requested type ${flagDataTypeMap[flagType]}`);
  }
  return {
    code,
    type: flagDataTypeMap[flag.t || flagType],
    value: flag.v == null ? defaultValue : flag.v,
    is_default: flag.v == null
  };
};
var getBooleanFlag = (code, defaultValue) => {
  try {
    const flag = getFlag(code, defaultValue, "b");
    return flag.value;
  } catch (err) {
    console.error(err);
    return err;
  }
};
var getIntegerFlag = (code, defaultValue) => {
  try {
    const flag = getFlag(code, defaultValue, "i");
    return flag.value;
  } catch (err) {
    console.error(err);
    return err;
  }
};
var getStringFlag = (code, defaultValue) => {
  try {
    const flag = getFlag(code, defaultValue, "s");
    return flag.value;
  } catch (err) {
    console.error(err);
    return err;
  }
};
var getUserOrganizations = () => {
  const orgCodes = getClaimValue("org_codes", "id_token") ?? [];
  return {
    orgCodes
  };
};
var createKindeClient = async (options) => {
  if (!options) {
    throw Error("Please provide your Kinde credentials");
  }
  if (options !== Object(options)) {
    throw Error("The Kinde SDK must be initiated with an object");
  }
  const { audience, client_id: clientId, domain, is_dangerously_use_local_storage = false, redirect_uri, logout_uri = redirect_uri, on_redirect_callback, scope = "openid profile email offline", proxy_redirect_uri, _framework, _frameworkVersion } = options;
  if (audience && typeof audience !== "string") {
    throw Error("Please supply a valid audience for your api");
  }
  if (scope && typeof scope !== "string") {
    throw Error("Please supply a valid scope");
  }
  if (!redirect_uri || typeof options.redirect_uri !== "string") {
    throw Error("Please supply a valid redirect_uri for your users to be redirected after successful authentication");
  }
  if (!domain || typeof domain !== "string") {
    throw Error("Please supply a valid Kinde domain so we can connect to your account");
  }
  if (typeof is_dangerously_use_local_storage !== "boolean") {
    throw TypeError("Please supply a boolean value for is_dangerously_use_local_storage");
  }
  const client_id = clientId || "spa@live";
  const is_use_cookie = !is_dangerously_use_local_storage && !domain.includes(".kinde.com");
  const config = {
    audience,
    client_id,
    redirect_uri,
    authorization_endpoint: `${domain}/oauth2/auth`,
    token_endpoint: `${domain}/oauth2/token`,
    requested_scopes: scope,
    domain,
    _framework,
    _frameworkVersion
  };
  const setStore = (data) => {
    if (!data || data.error)
      return;
    const accessToken = jwtDecode(data.access_token);
    const idToken = jwtDecode(data.id_token);
    store.setItem("kinde_token", data);
    store.setItem("kinde_access_token", accessToken);
    store.setItem("kinde_id_token", idToken);
    store.setItem("user", {
      id: idToken.sub,
      given_name: idToken.given_name,
      family_name: idToken.family_name,
      email: idToken.email,
      picture: idToken.picture
    });
    if (is_dangerously_use_local_storage) {
      localStorage.setItem("kinde_refresh_token", data.refresh_token);
    } else {
      store.setItem("kinde_refresh_token", data.refresh_token);
    }
  };
  const useRefreshToken = async ({ tokenType } = { tokenType: "kinde_access_token" }) => {
    const refresh_token = is_dangerously_use_local_storage ? localStorage.getItem("kinde_refresh_token") : store.getItem("kinde_refresh_token");
    if (refresh_token || is_use_cookie) {
      try {
        const response = await fetch(config.token_endpoint, {
          method: "POST",
          ...is_use_cookie && { credentials: "include" },
          headers: new Headers({
            "Content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "Kinde-SDK": `
            ${config._framework || "JavaScript"}/${config._frameworkVersion || version}`
          }),
          body: new URLSearchParams({
            client_id: config.client_id,
            grant_type: "refresh_token",
            ...!is_use_cookie && refresh_token && { refresh_token }
          })
        });
        const data = await response.json();
        setStore(data);
        if (tokenType === "kinde_id_token") {
          return data.id_token;
        }
        return data.access_token;
      } catch (err) {
        console.error(err);
      }
    }
  };
  const getTokenType = async (tokenType) => {
    const token = store.getItem("kinde_token");
    if (!token) {
      return await useRefreshToken({ tokenType });
    }
    const tokenToReturn = store.getItem(tokenType);
    const isTokenValid = isValidJwt(tokenToReturn);
    if (isTokenValid) {
      return tokenType === "kinde_access_token" ? token.access_token : token.id_token;
    } else {
      return await useRefreshToken({ tokenType });
    }
  };
  const getToken = async () => {
    return await getTokenType("kinde_access_token");
  };
  const getIdToken = async () => {
    return await getTokenType("kinde_id_token");
  };
  const isAuthenticated = async () => {
    const accessToken = store.getItem("kinde_access_token");
    if (!accessToken) {
      return false;
    }
    const isTokenValid = isValidJwt(accessToken);
    if (isTokenValid) {
      return true;
    }
    await useRefreshToken();
    return true;
  };
  const getPermissions = () => {
    const orgCode = getClaimValue("org_code");
    const permissions = getClaimValue("permissions") ?? [];
    return {
      permissions,
      orgCode
    };
  };
  const getPermission = (key) => {
    const orgCode = getClaimValue("org_code");
    const permissions = getClaimValue("permissions") ?? [];
    return {
      isGranted: permissions.some((p2) => p2 === key),
      orgCode
    };
  };
  const getOrganization = () => {
    const orgCode = getClaimValue("org_code");
    return {
      orgCode
    };
  };
  const handleRedirectToApp = async (q) => {
    const code = q.get("code");
    const state = q.get("state");
    const error = q.get("error");
    if (error) {
      console.error(`Error returned from authorization server: ${error}`);
    }
    const stringState = sessionStorage.getItem(`${SESSION_PREFIX}-${state}`);
    if (!stringState) {
      console.error("Invalid state");
    } else {
      const { appState, codeVerifier } = JSON.parse(stringState);
      try {
        const response = await fetch(config.token_endpoint, {
          method: "POST",
          ...is_use_cookie && { credentials: "include" },
          headers: new Headers({
            "Content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "Kinde-SDK": `${config._framework || "JavaScript"}/${config._frameworkVersion || version}`
          }),
          body: new URLSearchParams({
            client_id: config.client_id,
            code,
            code_verifier: codeVerifier,
            grant_type: "authorization_code",
            redirect_uri: config.redirect_uri
          })
        });
        const data = await response.json();
        setStore(data);
        const url = new URL(window.location.toString());
        url.search = "";
        sessionStorage.removeItem(`${SESSION_PREFIX}-${state}`);
        const user = getUser();
        window.history.pushState({}, "", url);
        if (on_redirect_callback) {
          on_redirect_callback(user, appState);
        }
      } catch (err) {
        console.error(err);
        sessionStorage.removeItem(`${SESSION_PREFIX}-${state}`);
      }
    }
  };
  const redirectToKinde = async (options2) => {
    const { app_state, start_page, is_create_org, org_name = "", org_code, authUrlParams = {} } = options2;
    const { state, code_challenge, url } = await setupChallenge(config.authorization_endpoint, app_state);
    const searchParams = {
      redirect_uri,
      client_id,
      response_type: "code",
      scope: config.requested_scopes,
      code_challenge,
      code_challenge_method: "S256",
      state
    };
    if (start_page) {
      searchParams.start_page = start_page;
    }
    if (org_code) {
      searchParams.org_code = org_code;
    }
    if (is_create_org) {
      searchParams.is_create_org = String(is_create_org);
      searchParams.org_name = org_name;
    }
    const urlSearchParams = new URLSearchParams(Object.assign(authUrlParams, searchParams));
    if (audience) {
      audience.trim().split(/\s+/).forEach((aud) => {
        urlSearchParams.append("audience", aud);
      });
    }
    url.search = String(urlSearchParams);
    window.location.href = url.toString();
  };
  const register = async (options2) => {
    await redirectToKinde({
      ...options2,
      start_page: "registration"
    });
  };
  const login = async (options2) => {
    await redirectToKinde({
      ...options2
    });
  };
  const createOrg = async (options2) => {
    await redirectToKinde({
      ...options2,
      start_page: "registration",
      is_create_org: true
    });
  };
  const getUser = () => {
    return store.getItem("user");
  };
  const getUserProfile = async () => {
    const token = await getToken();
    const headers = {
      Accept: "application/json",
      Authorization: `Bearer ${token}`
    };
    try {
      const res = await fetch(`${config.domain}/oauth2/v2/user_profile`, {
        method: "GET",
        headers
      });
      const json = await res.json();
      store.setItem("user", {
        id: json.sub,
        given_name: json.given_name,
        family_name: json.family_name,
        email: json.email,
        picture: json.picture
      });
      return store.getItem("user");
    } catch (err) {
      console.error(err);
    }
  };
  const logout = async () => {
    const url = new URL(`${config.domain}/logout`);
    try {
      store.reset();
      if (is_dangerously_use_local_storage) {
        localStorage.removeItem("kinde_refresh_token");
      }
      const searchParams = new URLSearchParams({
        redirect: logout_uri
      });
      url.search = String(searchParams);
      window.location.href = url.toString();
    } catch (err) {
      console.error(err);
    }
  };
  const init = async () => {
    const q = new URLSearchParams(window.location.search);
    if (isKindeRedirect(q)) {
      await handleRedirectToApp(q);
    } else {
      if (is_use_cookie || is_dangerously_use_local_storage) {
        await useRefreshToken();
      }
    }
  };
  const isKindeRedirect = (searchParams) => {
    const hasOauthCode = searchParams.has("code");
    if (!hasOauthCode)
      return false;
    const { protocol, host, pathname } = window.location;
    const currentRedirectUri = proxy_redirect_uri || `${protocol}//${host}${pathname}`;
    return currentRedirectUri === redirect_uri || currentRedirectUri === `${redirect_uri}/`;
  };
  await init();
  return {
    getToken,
    getIdToken,
    getUser,
    getUserProfile,
    login,
    logout,
    register,
    isAuthenticated,
    createOrg,
    getClaim,
    getFlag,
    getBooleanFlag,
    getStringFlag,
    getIntegerFlag,
    getPermissions,
    getPermission,
    getOrganization,
    getUserOrganizations
  };
};

// node_modules/@kinde-oss/kinde-auth-react/dist/kinde-auth-react.esm.js
var s = function() {
  return s = Object.assign || function(e2) {
    for (var n2, r2 = 1, t2 = arguments.length; r2 < t2; r2++)
      for (var o2 in n2 = arguments[r2])
        Object.prototype.hasOwnProperty.call(n2, o2) && (e2[o2] = n2[o2]);
    return e2;
  }, s.apply(this, arguments);
};
function l(e2, n2, r2, t2) {
  return new (r2 || (r2 = Promise))(function(o2, i2) {
    function u2(e3) {
      try {
        c(t2.next(e3));
      } catch (e4) {
        i2(e4);
      }
    }
    function a2(e3) {
      try {
        c(t2.throw(e3));
      } catch (e4) {
        i2(e4);
      }
    }
    function c(e3) {
      var n3;
      e3.done ? o2(e3.value) : (n3 = e3.value, n3 instanceof r2 ? n3 : new r2(function(e4) {
        e4(n3);
      })).then(u2, a2);
    }
    c((t2 = t2.apply(e2, n2 || [])).next());
  });
}
function f(e2, n2) {
  var r2, t2, o2, i2, u2 = { label: 0, sent: function() {
    if (1 & o2[0])
      throw o2[1];
    return o2[1];
  }, trys: [], ops: [] };
  return i2 = { next: a2(0), throw: a2(1), return: a2(2) }, "function" == typeof Symbol && (i2[Symbol.iterator] = function() {
    return this;
  }), i2;
  function a2(a3) {
    return function(c) {
      return function(a4) {
        if (r2)
          throw new TypeError("Generator is already executing.");
        for (; i2 && (i2 = 0, a4[0] && (u2 = 0)), u2; )
          try {
            if (r2 = 1, t2 && (o2 = 2 & a4[0] ? t2.return : a4[0] ? t2.throw || ((o2 = t2.return) && o2.call(t2), 0) : t2.next) && !(o2 = o2.call(t2, a4[1])).done)
              return o2;
            switch (t2 = 0, o2 && (a4 = [2 & a4[0], o2.value]), a4[0]) {
              case 0:
              case 1:
                o2 = a4;
                break;
              case 4:
                return u2.label++, { value: a4[1], done: false };
              case 5:
                u2.label++, t2 = a4[1], a4 = [0];
                continue;
              case 7:
                a4 = u2.ops.pop(), u2.trys.pop();
                continue;
              default:
                if (!(o2 = u2.trys, (o2 = o2.length > 0 && o2[o2.length - 1]) || 6 !== a4[0] && 2 !== a4[0])) {
                  u2 = 0;
                  continue;
                }
                if (3 === a4[0] && (!o2 || a4[1] > o2[0] && a4[1] < o2[3])) {
                  u2.label = a4[1];
                  break;
                }
                if (6 === a4[0] && u2.label < o2[1]) {
                  u2.label = o2[1], o2 = a4;
                  break;
                }
                if (o2 && u2.label < o2[2]) {
                  u2.label = o2[2], u2.ops.push(a4);
                  break;
                }
                o2[2] && u2.ops.pop(), u2.trys.pop();
                continue;
            }
            a4 = n2.call(e2, u2);
          } catch (e3) {
            a4 = [6, e3], t2 = 0;
          } finally {
            r2 = o2 = 0;
          }
        if (5 & a4[0])
          throw a4[1];
        return { value: a4[0] ? a4[1] : void 0, done: true };
      }([a3, c]);
    };
  }
}
var g = { isAuthenticated: false, isLoading: true };
var d = (0, import_react.createContext)(s({}, g));
var h = function() {
  var e2 = (0, import_react.useContext)(d);
  if (void 0 === e2)
    throw new Error("Oooops! useKindeAuth must be used within a KindeProvider");
  return e2;
};
var v = { INITIALISED: function(e2, n2) {
  return s(s({}, e2), { isAuthenticated: Boolean(n2.user), user: n2.user, isLoading: false, error: void 0 });
}, LOGOUT: function(e2) {
  return s(s({}, e2), { isAuthenticated: false, user: void 0 });
}, ERROR: function(e2, n2) {
  return s(s({}, e2), { isLoading: false, error: n2.error });
} };
var p = function(e2, n2) {
  return v[n2.type] ? v[n2.type](e2, n2) : e2;
};
var y = function() {
  window.history.replaceState({}, document.title, window.location.pathname);
};
var w = function(n2) {
  var r2 = n2.audience, h2 = n2.scope, v2 = n2.clientId, w2 = n2.children, b = n2.domain, m = n2.isDangerouslyUseLocalStorage, k = void 0 !== m && m, O = n2.redirectUri, I = n2.onRedirectCallback, _ = void 0 === I ? y : I, F = n2.logoutUri, P = (0, import_react.useState)(), R = P[0], S = P[1], T = (0, import_react.useReducer)(p, g), E = T[0], L = T[1];
  (0, import_react.useEffect)(function() {
    try {
      l(void 0, void 0, void 0, function() {
        var e2;
        return f(this, function(n3) {
          switch (n3.label) {
            case 0:
              return [4, createKindeClient({ audience: r2, scope: h2, client_id: v2, domain: b, is_dangerously_use_local_storage: k, redirect_uri: O, logout_uri: F, on_redirect_callback: _, _framework: "React", _frameworkVersion: "3.0.26" })];
            case 1:
              return e2 = n3.sent(), S(e2), [2];
          }
        });
      });
    } catch (e2) {
      console.error(e2);
    }
    return function() {
    };
  }, [r2, h2, v2, b, k, O, F]), (0, import_react.useEffect)(function() {
    var e2 = true;
    return function() {
      if (R && e2)
        try {
          var n3 = R.getUser();
          L({ type: "INITIALISED", user: n3 });
        } catch (e3) {
          console.log(e3), L({ type: "ERROR", error: "login error" });
        }
    }(), function() {
      e2 = false;
    };
  }, [R]);
  var U = (0, import_react.useCallback)(function(e2) {
    return R.login(e2);
  }, [R]), x = (0, import_react.useCallback)(function(e2) {
    return R.register(e2);
  }, [R]), A = (0, import_react.useCallback)(function() {
    return R.logout();
  }, [R]), z = (0, import_react.useCallback)(function(e2, n3) {
    return R.getClaim(e2, n3);
  }, [R]), j = (0, import_react.useCallback)(function(e2, n3, r3) {
    return R.getFlag(e2, n3, r3);
  }, [R]), B = (0, import_react.useCallback)(function(e2, n3) {
    return R.getBooleanFlag(e2, n3);
  }, [R]), C = (0, import_react.useCallback)(function(e2, n3) {
    return R.getIntegerFlag(e2, n3);
  }, [R]), D = (0, import_react.useCallback)(function(e2, n3) {
    return R.getStringFlag(e2, n3);
  }, [R]), G = (0, import_react.useCallback)(function() {
    return R.getPermissions();
  }, [R]), K = (0, import_react.useCallback)(function(e2) {
    return R.getPermission(e2);
  }, [R]), N = (0, import_react.useCallback)(function() {
    return R.getOrganization();
  }, [R]), V = (0, import_react.useCallback)(function() {
    return R.getUserOrganizations();
  }, [R]), q = (0, import_react.useCallback)(function(e2) {
    return R.createOrg(e2);
  }, [R]), H = (0, import_react.useCallback)(function() {
    return l(void 0, void 0, void 0, function() {
      var e2, n3;
      return f(this, function(r3) {
        switch (r3.label) {
          case 0:
            return r3.trys.push([0, 2, , 3]), [4, R.getToken()];
          case 1:
            return e2 = r3.sent(), [3, 3];
          case 2:
            throw n3 = r3.sent(), console.error(n3);
          case 3:
            return [2, e2];
        }
      });
    });
  }, [R]), J = (0, import_react.useCallback)(function() {
    return l(void 0, void 0, void 0, function() {
      var e2, n3;
      return f(this, function(r3) {
        switch (r3.label) {
          case 0:
            return r3.trys.push([0, 2, , 3]), [4, R.getIdToken()];
          case 1:
            return e2 = r3.sent(), [3, 3];
          case 2:
            throw n3 = r3.sent(), console.error(n3);
          case 3:
            return [2, e2];
        }
      });
    });
  }, [R]), M = (0, import_react.useMemo)(function() {
    return s(s({}, E), { getToken: H, getIdToken: J, login: U, register: x, logout: A, createOrg: q, getBooleanFlag: B, getClaim: z, getFlag: j, getIntegerFlag: C, getPermissions: G, getPermission: K, getOrganization: N, getStringFlag: D, getUserOrganizations: V });
  }, [E, H, J, U, x, A, q, z, G, K, N, V]);
  return import_react.default.createElement(d.Provider, { value: M }, w2);
};
export {
  w as KindeProvider,
  h as useKindeAuth
};
//# sourceMappingURL=@kinde-oss_kinde-auth-react.js.map
