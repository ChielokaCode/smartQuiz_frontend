/// <reference types="react" />
import createKindeClient from '@kinde-oss/kinde-auth-pkce-js';
import react from 'react';

type KindeUser = {
    given_name: string | null;
    id: string | null;
    family_name: string | null;
    email: string | null;
    picture: string | null;
};
type State = {
    user?: KindeUser;
    isLoading: boolean;
    isAuthenticated: boolean;
    error?: string | undefined;
};

type KindeClient = Awaited<ReturnType<typeof createKindeClient>>;
interface KindeContextProps extends State {
    login: KindeClient['login'];
    register: KindeClient['register'];
    logout: KindeClient['logout'];
    createOrg: KindeClient['createOrg'];
    getClaim: KindeClient['getClaim'];
    getFlag: KindeClient['getFlag'];
    getBooleanFlag: KindeClient['getBooleanFlag'];
    getIntegerFlag: KindeClient['getIntegerFlag'];
    getStringFlag: KindeClient['getStringFlag'];
    getPermissions: KindeClient['getPermissions'];
    getPermission: KindeClient['getPermission'];
    getOrganization: KindeClient['getOrganization'];
    getToken: KindeClient['getToken'];
    getIdToken: KindeClient['getIdToken'];
    getUser: KindeClient['getUser'];
    getUserOrganizations: KindeClient['getUserOrganizations'];
}

declare const useKindeAuth: () => KindeContextProps;

type KindeProviderProps = {
    audience?: string;
    children: react.ReactNode;
    clientId?: string;
    domain: string;
    isDangerouslyUseLocalStorage?: boolean;
    logoutUri?: string;
    redirectUri: string;
    onRedirectCallback?: (user: KindeUser, state?: object) => void;
    scope?: string;
};
declare const KindeProvider: ({ audience, scope, clientId, children, domain, isDangerouslyUseLocalStorage, redirectUri, onRedirectCallback, logoutUri }: KindeProviderProps) => JSX.Element;

export { KindeProvider, useKindeAuth };
